{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nexports.detect = detect;\nexports.platform = void 0;\n/**\n * Utilities for webOS platform detection.\n *\n * @module webos/platform\n * @exports detect\n * @exports platform\n */\n\nfunction is(type) {\n  return window.navigator.userAgent.indexOf(type) > -1;\n}\nvar _platform;\n\n/**\n * Returns the {@link webos/platform.platform} object.\n *\n * @function\n * @returns {Object} The {@link webos/platform.platform} object\n * @memberof webos/platform\n * @public\n */\nfunction detect() {\n  if (_platform) {\n    // if we've already determined the platform, we'll use that determination\n    return _platform;\n  } else if (typeof window === 'undefined' || !window.PalmSystem) {\n    // if window isn't available (in prerendering or snapshot runs), bail out early\n    return {\n      unknown: true\n    };\n  }\n\n  // build out our cached platform determination for future usage\n  _platform = {};\n  if (is('SmartWatch')) {\n    _platform.watch = true;\n  } else if (is('SmartTV') || is('Large Screen')) {\n    _platform.tv = true;\n  } else {\n    try {\n      var legacyInfo = JSON.parse(window.PalmSystem.deviceInfo || '{}');\n      if (legacyInfo.platformVersionMajor && legacyInfo.platformVersionMinor) {\n        var major = parseInt(legacyInfo.platformVersionMajor);\n        var minor = parseInt(legacyInfo.platformVersionMinor);\n        if (major < 3 || major === 3 && minor <= 0) {\n          _platform.legacy = true;\n        } else {\n          _platform.open = true;\n        }\n      } else {\n        _platform.unknown = true;\n      }\n    } catch (e) {\n      _platform.open = true;\n    }\n\n    // TODO: clean these up. They shouldn't be here\n    window.Mojo = window.Mojo || {\n      relaunch: function relaunch() {}\n    };\n    if (window.PalmSystem.stageReady) window.PalmSystem.stageReady();\n  }\n  return _platform;\n}\n\n/**\n * Provides identification of webOS variants.\n *\n * @readonly\n * @type {Object}\n * @property {Boolean} [tv] `true` for LG webOS SmartTV\n * @property {Boolean} [watch] `true` for LG webOS SmartWatch\n * @property {Boolean} [open] `true` for Open webOS\n * @property {Boolean} [legacy] `true` for legacy webOS (Palm and HP hardware)\n * @property {Boolean} [unknown] `true` for any unknown system\n * @memberof webos/platform\n * @public\n */\nvar platform = {};\nexports.platform = platform;\n['tv', 'watch', 'open', 'legacy', 'unknown'].forEach(function (name) {\n  Object.defineProperty(platform, name, {\n    enumerable: true,\n    get: function get() {\n      var p = detect();\n      return p[name];\n    }\n  });\n});\nvar _default = platform;\nexports[\"default\"] = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","detect","platform","is","type","window","navigator","userAgent","indexOf","_platform","PalmSystem","unknown","watch","tv","legacyInfo","JSON","parse","deviceInfo","platformVersionMajor","platformVersionMinor","major","parseInt","minor","legacy","open","e","Mojo","relaunch","stageReady","forEach","name","enumerable","get","p","_default"],"sources":["/home/islab/LGEE/project/frontend/node_modules/@enact/webos/platform/platform.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nexports.detect = detect;\nexports.platform = void 0;\n/**\n * Utilities for webOS platform detection.\n *\n * @module webos/platform\n * @exports detect\n * @exports platform\n */\n\nfunction is(type) {\n  return window.navigator.userAgent.indexOf(type) > -1;\n}\nvar _platform;\n\n/**\n * Returns the {@link webos/platform.platform} object.\n *\n * @function\n * @returns {Object} The {@link webos/platform.platform} object\n * @memberof webos/platform\n * @public\n */\nfunction detect() {\n  if (_platform) {\n    // if we've already determined the platform, we'll use that determination\n    return _platform;\n  } else if (typeof window === 'undefined' || !window.PalmSystem) {\n    // if window isn't available (in prerendering or snapshot runs), bail out early\n    return {\n      unknown: true\n    };\n  }\n\n  // build out our cached platform determination for future usage\n  _platform = {};\n  if (is('SmartWatch')) {\n    _platform.watch = true;\n  } else if (is('SmartTV') || is('Large Screen')) {\n    _platform.tv = true;\n  } else {\n    try {\n      var legacyInfo = JSON.parse(window.PalmSystem.deviceInfo || '{}');\n      if (legacyInfo.platformVersionMajor && legacyInfo.platformVersionMinor) {\n        var major = parseInt(legacyInfo.platformVersionMajor);\n        var minor = parseInt(legacyInfo.platformVersionMinor);\n        if (major < 3 || major === 3 && minor <= 0) {\n          _platform.legacy = true;\n        } else {\n          _platform.open = true;\n        }\n      } else {\n        _platform.unknown = true;\n      }\n    } catch (e) {\n      _platform.open = true;\n    }\n\n    // TODO: clean these up. They shouldn't be here\n    window.Mojo = window.Mojo || {\n      relaunch: function relaunch() {}\n    };\n    if (window.PalmSystem.stageReady) window.PalmSystem.stageReady();\n  }\n  return _platform;\n}\n\n/**\n * Provides identification of webOS variants.\n *\n * @readonly\n * @type {Object}\n * @property {Boolean} [tv] `true` for LG webOS SmartTV\n * @property {Boolean} [watch] `true` for LG webOS SmartWatch\n * @property {Boolean} [open] `true` for Open webOS\n * @property {Boolean} [legacy] `true` for legacy webOS (Palm and HP hardware)\n * @property {Boolean} [unknown] `true` for any unknown system\n * @memberof webos/platform\n * @public\n */\nvar platform = {};\nexports.platform = platform;\n['tv', 'watch', 'open', 'legacy', 'unknown'].forEach(function (name) {\n  Object.defineProperty(platform, name, {\n    enumerable: true,\n    get: function get() {\n      var p = detect();\n      return p[name];\n    }\n  });\n});\nvar _default = platform;\nexports[\"default\"] = _default;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}