{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.secondsToTime = exports.secondsToPeriod = exports.parseTime = exports.countReactChildren = void 0;\nvar _react = require(\"react\");\n// MediaPlayer utils.js\n//\n/**\n * Create a time object (hour, minute, second) from an amount of seconds.\n *\n * @param  {Number|String} value A duration of time represented in seconds\n *\n * @returns {Object}       An object with keys {hour, minute, second} representing the duration\n *                        seconds provided as an argument.\n * @private\n */\nvar parseTime = function parseTime(value) {\n  value = parseFloat(value);\n  var time = {};\n  var hour = Math.floor(value / (60 * 60));\n  time.minute = Math.floor(value / 60 % 60);\n  time.second = Math.floor(value % 60);\n  if (hour) {\n    time.hour = hour;\n  }\n  return time;\n};\n\n/**\n * Generate a time usable by <time datetime />.\n *\n * @param  {Number|String} seconds A duration of time represented in seconds\n *\n * @returns {String}      String formatted for use in a `datetime` field of a `<time>` tag.\n * @private\n */\nexports.parseTime = parseTime;\nvar secondsToPeriod = function secondsToPeriod(seconds) {\n  return 'P' + seconds + 'S';\n};\n\n/**\n * Formats a duration in seconds into a human-readable time.\n *\n * @type {Function}\n * @param  {Number|String} seconds A duration of time represented in seconds\n * @param  {DurationFmt}   durfmt  An instance of a `ilib.DurationFmt` object from iLib configured\n *                                 to display time\n * @param  {Object}        config  Additional configuration object that includes `includeHour`\n *\n * @returns {String} Formatted duration string\n * @memberof sandstone/MediaPlayer\n * @public\n */\nexports.secondsToPeriod = secondsToPeriod;\nvar secondsToTime = function secondsToTime(seconds, durfmt, config) {\n  var includeHour = config && config.includeHour;\n  if (durfmt) {\n    var parsedTime = parseTime(seconds);\n    var timeString = durfmt.format(parsedTime).toString();\n    if (includeHour && !parsedTime.hour) {\n      return '00:' + timeString;\n    } else {\n      return timeString;\n    }\n  }\n  return includeHour ? '00:00:00' : '00:00';\n};\n\n/**\n * Safely count the children nodes and exclude null & undefined values for an accurate count of\n * real children\n *\n * @param {component} children React.Component or React.PureComponent\n * @returns {Number} Number of children nodes\n * @private\n */\nexports.secondsToTime = secondsToTime;\nvar countReactChildren = function countReactChildren(children) {\n  return _react.Children.toArray(children).filter(function (n) {\n    return n != null;\n  }).length;\n};\nexports.countReactChildren = countReactChildren;","map":{"version":3,"names":["Object","defineProperty","exports","value","secondsToTime","secondsToPeriod","parseTime","countReactChildren","_react","require","parseFloat","time","hour","Math","floor","minute","second","seconds","durfmt","config","includeHour","parsedTime","timeString","format","toString","children","Children","toArray","filter","n","length"],"sources":["/home/islab/LGEE/project/frontend/node_modules/@enact/sandstone/MediaPlayer/util.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.secondsToTime = exports.secondsToPeriod = exports.parseTime = exports.countReactChildren = void 0;\nvar _react = require(\"react\");\n// MediaPlayer utils.js\n//\n/**\n * Create a time object (hour, minute, second) from an amount of seconds.\n *\n * @param  {Number|String} value A duration of time represented in seconds\n *\n * @returns {Object}       An object with keys {hour, minute, second} representing the duration\n *                        seconds provided as an argument.\n * @private\n */\nvar parseTime = function parseTime(value) {\n  value = parseFloat(value);\n  var time = {};\n  var hour = Math.floor(value / (60 * 60));\n  time.minute = Math.floor(value / 60 % 60);\n  time.second = Math.floor(value % 60);\n  if (hour) {\n    time.hour = hour;\n  }\n  return time;\n};\n\n/**\n * Generate a time usable by <time datetime />.\n *\n * @param  {Number|String} seconds A duration of time represented in seconds\n *\n * @returns {String}      String formatted for use in a `datetime` field of a `<time>` tag.\n * @private\n */\nexports.parseTime = parseTime;\nvar secondsToPeriod = function secondsToPeriod(seconds) {\n  return 'P' + seconds + 'S';\n};\n\n/**\n * Formats a duration in seconds into a human-readable time.\n *\n * @type {Function}\n * @param  {Number|String} seconds A duration of time represented in seconds\n * @param  {DurationFmt}   durfmt  An instance of a `ilib.DurationFmt` object from iLib configured\n *                                 to display time\n * @param  {Object}        config  Additional configuration object that includes `includeHour`\n *\n * @returns {String} Formatted duration string\n * @memberof sandstone/MediaPlayer\n * @public\n */\nexports.secondsToPeriod = secondsToPeriod;\nvar secondsToTime = function secondsToTime(seconds, durfmt, config) {\n  var includeHour = config && config.includeHour;\n  if (durfmt) {\n    var parsedTime = parseTime(seconds);\n    var timeString = durfmt.format(parsedTime).toString();\n    if (includeHour && !parsedTime.hour) {\n      return '00:' + timeString;\n    } else {\n      return timeString;\n    }\n  }\n  return includeHour ? '00:00:00' : '00:00';\n};\n\n/**\n * Safely count the children nodes and exclude null & undefined values for an accurate count of\n * real children\n *\n * @param {component} children React.Component or React.PureComponent\n * @returns {Number} Number of children nodes\n * @private\n */\nexports.secondsToTime = secondsToTime;\nvar countReactChildren = function countReactChildren(children) {\n  return _react.Children.toArray(children).filter(function (n) {\n    return n != null;\n  }).length;\n};\nexports.countReactChildren = countReactChildren;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,aAAa,GAAGF,OAAO,CAACG,eAAe,GAAGH,OAAO,CAACI,SAAS,GAAGJ,OAAO,CAACK,kBAAkB,GAAG,KAAK,CAAC;AACzG,IAAIC,MAAM,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIH,SAAS,GAAG,SAASA,SAASA,CAACH,KAAK,EAAE;EACxCA,KAAK,GAAGO,UAAU,CAACP,KAAK,CAAC;EACzB,IAAIQ,IAAI,GAAG,CAAC,CAAC;EACb,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACX,KAAK,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;EACxCQ,IAAI,CAACI,MAAM,GAAGF,IAAI,CAACC,KAAK,CAACX,KAAK,GAAG,EAAE,GAAG,EAAE,CAAC;EACzCQ,IAAI,CAACK,MAAM,GAAGH,IAAI,CAACC,KAAK,CAACX,KAAK,GAAG,EAAE,CAAC;EACpC,IAAIS,IAAI,EAAE;IACRD,IAAI,CAACC,IAAI,GAAGA,IAAI;EAClB;EACA,OAAOD,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAT,OAAO,CAACI,SAAS,GAAGA,SAAS;AAC7B,IAAID,eAAe,GAAG,SAASA,eAAeA,CAACY,OAAO,EAAE;EACtD,OAAO,GAAG,GAAGA,OAAO,GAAG,GAAG;AAC5B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAf,OAAO,CAACG,eAAe,GAAGA,eAAe;AACzC,IAAID,aAAa,GAAG,SAASA,aAAaA,CAACa,OAAO,EAAEC,MAAM,EAAEC,MAAM,EAAE;EAClE,IAAIC,WAAW,GAAGD,MAAM,IAAIA,MAAM,CAACC,WAAW;EAC9C,IAAIF,MAAM,EAAE;IACV,IAAIG,UAAU,GAAGf,SAAS,CAACW,OAAO,CAAC;IACnC,IAAIK,UAAU,GAAGJ,MAAM,CAACK,MAAM,CAACF,UAAU,CAAC,CAACG,QAAQ,CAAC,CAAC;IACrD,IAAIJ,WAAW,IAAI,CAACC,UAAU,CAACT,IAAI,EAAE;MACnC,OAAO,KAAK,GAAGU,UAAU;IAC3B,CAAC,MAAM;MACL,OAAOA,UAAU;IACnB;EACF;EACA,OAAOF,WAAW,GAAG,UAAU,GAAG,OAAO;AAC3C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAlB,OAAO,CAACE,aAAa,GAAGA,aAAa;AACrC,IAAIG,kBAAkB,GAAG,SAASA,kBAAkBA,CAACkB,QAAQ,EAAE;EAC7D,OAAOjB,MAAM,CAACkB,QAAQ,CAACC,OAAO,CAACF,QAAQ,CAAC,CAACG,MAAM,CAAC,UAAUC,CAAC,EAAE;IAC3D,OAAOA,CAAC,IAAI,IAAI;EAClB,CAAC,CAAC,CAACC,MAAM;AACX,CAAC;AACD5B,OAAO,CAACK,kBAAkB,GAAGA,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}